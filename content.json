{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"https://cyn51666.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-10-11T05:36:04.654Z","updated":"2020-10-11T05:36:04.654Z","comments":false,"path":"/404.html","permalink":"https://cyn51666.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2020-10-11T05:36:04.655Z","updated":"2020-10-11T05:36:04.655Z","comments":false,"path":"about/index.html","permalink":"https://cyn51666.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2020-10-11T05:36:04.655Z","updated":"2020-10-11T05:36:04.655Z","comments":false,"path":"books/index.html","permalink":"https://cyn51666.github.io/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-10-11T05:36:04.656Z","updated":"2020-10-11T05:36:04.656Z","comments":true,"path":"links/index.html","permalink":"https://cyn51666.github.io/links/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-10-11T06:30:37.118Z","updated":"2020-10-11T05:36:04.655Z","comments":false,"path":"categories/index.html","permalink":"https://cyn51666.github.io/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-10-11T05:36:04.656Z","updated":"2020-10-11T05:36:04.656Z","comments":false,"path":"repository/index.html","permalink":"https://cyn51666.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-10-11T06:31:03.948Z","updated":"2020-10-11T05:36:04.656Z","comments":false,"path":"tags/index.html","permalink":"https://cyn51666.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"分组查询与统计","slug":"分组查询与统计","date":"2020-11-02T13:31:00.000Z","updated":"2020-11-02T10:33:24.839Z","comments":true,"path":"2020/11/02/分组查询与统计/","link":"","permalink":"https://cyn51666.github.io/2020/11/02/%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2%E4%B8%8E%E7%BB%9F%E8%AE%A1/","excerpt":"","text":"1. 使用Group By分组 分组汇总原理分析 空不参与查询 2. 分组统计筛选–使用having筛选分组结果 使用having筛选分组后的统计结果 1234567select 班级名称 &#x3D; StudentClass.ClassName,C#平均分&#x3D;avg(CSharp),DB平均分&#x3D;avg(SQLServerDB) from Studentsinner join ScoreList on Students.StudentId&#x3D;ScoreList.StudentId inner join StudentClass on StudentClass.ClassId&#x3D;Students.ClassIdgroup by ClassNamehaving avg(CSharp)&gt;70 and avg(SQLServerDB)&gt;&#x3D;70 3. 重复数据查询 在知道哪个数据重复的情况 1234567891011121314151617--在知道哪个字段重复的情况下select StudentId from ScoreList group by StudentId having count(*)&gt;1--查询所有重复的记录--在知道那个字段重复的情况select StudentId from ScoreList group by StudentId having COUNT(*)&gt;1--查询所有重复的记录select * from ScoreListwhere StudentId in(select StudentId from ScoreList group by StudentId having COUNT(*)&gt;1)order by StudentId--其他方法select * from ScoreListwhere (select COUNT(*) from ScoreList s where s.StudentId&#x3D;ScoreList.StudentId)&gt;1order by StudentId","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"ADO.NET与数据库连接","slug":"ADO.NET与数据库连接","date":"2020-11-02T11:31:00.000Z","updated":"2020-11-02T13:44:04.596Z","comments":true,"path":"2020/11/02/ADO.NET与数据库连接/","link":"","permalink":"https://cyn51666.github.io/2020/11/02/ADO.NET%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/","excerpt":"","text":"1. MIS系统部署方案 完整的应用程序包括客户端和数据库服务端 理解ADONET ActiveX Data Objects(ADO) 是.NET平台下应用程序和数据源进行交互的一组面向对象的类库 简单理解：即数据访问组件 2. ADONET主要组件 NET数据提供程序类型 NET Framework数据提供程序 第三方提供的数据提供程序：MySql.NET数据提供程序 3. 如何正确的连接数据库 需要四个条件 账号的使用 sa账号拥有访问数据的所有权限，学习和开发测试阶段使用 在后续中还会专门学习其他账号创建与授权方法 4. Connection对象 作用：建立应用程序和数据库点对点连接 属性：ConnectionString（连接字符串） 封装连接数据库的四个条件 Server=服务器名或IP地址;DataBase=数据库名称;User ID=登录账号;Password=登录密码 使用SQLServer用户验证登陆的字符串示例（经常使用） Server=192.168.1.2(服务器名或IP地址);DataBase=数据库名称;Uid=登录账号;Pwd=登录密码 使用Windows集成验证登陆的字符串示例（仅限于本机） Data Source=.;Intinal Catalog=StudentManageDB;Integrated Security=Ture 方法： Open(); 打开连接 Close(); 关闭连接 测试 1234567891011121314151617181920&#x2F;&#x2F;引入命名空间using System.Datausing System.Data.SqlClien&#x2F;&#x2F;定义连接字符串string connstring &#x3D; &quot;serevr&#x3D;.;DataBase&#x3D;StudentManageDB;Uid&#x3D;sa;Pwd&#x3D;314159&quot;;&#x2F;&#x2F;创建链接对象SqlConnection conn &#x3D;new SqlConnection (connString);&#x2F;&#x2F;打开连接conn.open();&#x2F;&#x2F;判断连接是否打开if(conn.state&#x3D;&#x3D;ConnectionState.Open)Console.WriteLine(&quot;conn is open&quot;);&#x2F;&#x2F;关闭连接conn.close();&#x2F;&#x2F;判断连接是否关闭if(conn.state&#x3D;&#x3D;ConnectionState.Closed)Console.WriteLine(&quot;conn is Closed&quot;);Console.ReadLine(); 连接字符串的特别说明 5. Command对象 作用：向数据库发送sql语句 封装连接对象和要执行的sql语句 对数据库执行及具体的操作，提供增，删，查，改的方法 属性 CommandText：需要封装的sql语句或者存储过程名称 Connection：Command对象使用的数据库连接对象 方法 ExecuteNonQuery();执行增删改操作 ExecuteScalar();返回单一的查询结果 ExecuteReader();返回只读数据列表的查询 ExecuteNonQuery()方法使用要点 执行insert,update,delete类型语句 执行后返回受影响的行数，一般是大于0的数，等于0说明没有影响，-1表示出错","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"数据库设计原则","slug":"数据库设计的原则","date":"2020-11-02T11:29:00.000Z","updated":"2020-11-02T11:30:52.239Z","comments":true,"path":"2020/11/02/数据库设计的原则/","link":"","permalink":"https://cyn51666.github.io/2020/11/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%8E%9F%E5%88%99/","excerpt":"","text":"1. 数据库设计合理性检验 2. 数据库三范式原则 范式：最小冗余的表结构 范式类型： 第一范式 第二范式 第三范式 应用三范式原则，保证各个数据表结构设计的合理性 3. 第一范式（1st NF） 第一范式：目标是确保每列的原子性（即不可再分的最小数据单元） 第一范式一般都能满足 常见的第一范式不满足的情况：地址，姓名（有时分开写） 4. 第二范式（2st NF） 第二范式：要求每个表只描述一种实体的属性 满足条件：如果一个关系满足一范式，并且除了主键以外的其他列，都和主键想关，则满足第二范式 应用第二范式将与主键不相关的列独立为单独的实体 5. 第三范式 第三范式：要求每种实体各属性之间不能具有直接的依赖关系 满足条件：如果一个关系满足二范式，除主键之外，其他列之间都不具有直接的依赖关系，则满足第三范式 6. 数据库模型设计 规范后使用VISO软件创建数据模型 7. 三范式与数据库的性能 第三范式的应用后数据库的变化 使得实体被最大限度地分割成若干个小实体 实体增多，同类实体之间关系变得复杂，数据分布在多个表中 数据查询和统计将变得复杂，多表连接查询会适当降低查询的性能 为满足某种商业目标，数据库性能比规范数据库更重要 在给定的表中添加额外的字段，可大量减少需要从中搜索信息所需时间 比如，在高考成绩表中插入“成绩总分”列（该列其实冗余），以方便查询 进行规范化的同时，还需要综合考虑数据库的性能 三范式与数据库性能要根据实际要求权衡 根据实际需要增加或减少冗余列","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"最大最小平均值","slug":"最大最小平均值","date":"2020-11-01T12:04:00.000Z","updated":"2020-11-01T12:45:52.753Z","comments":true,"path":"2020/11/01/最大最小平均值/","link":"","permalink":"https://cyn51666.github.io/2020/11/01/%E6%9C%80%E5%A4%A7%E6%9C%80%E5%B0%8F%E5%B9%B3%E5%9D%87%E5%80%BC/","excerpt":"","text":"聚合函数 对某一列求和，对满足条件的记录总数求和 select SUM(CSharp) as c#总成绩 from ScoreList select 总人数 = COUNT（*） from Students 求最大，最小，平均值 select MAX(CSharp) as C#最高分,MIN(CSharp) as C#最低分 from ScoreList select AVG(CSharp) as C#平均分,AVG(SqlServerDB) as DB平均分, from ScoreList","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"数据库创建完整过程","slug":"数据库创建完整过程","date":"2020-10-31T23:06:51.000Z","updated":"2020-11-01T12:30:19.943Z","comments":true,"path":"2020/11/01/数据库创建完整过程/","link":"","permalink":"https://cyn51666.github.io/2020/11/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9B%E5%BB%BA%E5%AE%8C%E6%95%B4%E8%BF%87%E7%A8%8B/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196--指向当前要使用的数据库use mastergo--判断当前数据库是否存在if exists (select * from sysdatabases where name&#x3D;&#39;StudentManageDB&#39;)drop database StudentManageDB--删除数据库go--创建数据库create database StudentManageDBon primary( --数据库文件的逻辑名 name&#x3D;&#39;StudentManageDB_data&#39;, --数据库物理文件名（绝对路径） filename&#x3D;&#39;D:\\DB\\StudentManageDB_data.mdf&#39;, --数据库文件初始大小 size&#x3D;10MB, --数据文件增长量 filegrowth&#x3D;1MB)--创建日志文件log on( name&#x3D;&#39;StudentManageDB_log&#39;, filename&#x3D;&#39;D:\\DB\\StudentManageDB_log.ldf&#39;, size&#x3D;2MB, filegrowth&#x3D;1MB)go--创建学员信息数据表use StudentManageDBgoif exists (select * from sysobjects where name&#x3D;&#39;Students&#39;)drop table Studentsgocreate table Students( StudentId int identity(100000,1) , StudentName varchar(20) not null, Gender char(2) not null, Birthday datetime not null, StudentIdNo numeric(18,0) not null,--身份证号 Age int not null, PhoneNumber varchar(50), StudentAddress varchar(500), ClassId int not null --班级外键)go--创建班级表if exists(select * from sysobjects where name&#x3D;&#39;StudentClass&#39;)drop table StudentClassgocreate table StudentClass( ClassId int primary key, ClassName varchar(20) not null)go--创建成绩表if exists(select * from sysobjects where name&#x3D;&#39;ScoreList&#39;)drop table ScoreListgocreate table ScoreList( Id int identity(1,1) primary key, StudentId int not null, CSharp int null, SQLServerDB int null, UpdateTime datetime )go--创建管理员用户表if exists(select * from sysobjects where name&#x3D;&#39;Admins&#39;)drop table Adminscreate table Admins( LoginId int identity(1000,1) primary key, LoginPwd varchar(20) not null, AdminName varchar(20) not null)go--创建数据表的各种约束use StudentManageDBgo--创建“主键”约束primary keyif exists(select * from sysobjects where name&#x3D;&#39;pk_StudentId&#39;)alter table Students drop constraint pk_StudentIdalter table Studentsadd constraint pk_StudentId primary key (StudentId)--创建检查约束checkif exists(select * from sysobjects where name&#x3D;&#39;ck_Age&#39;)alter table Students drop constraint ck_Agealter table Studentsadd constraint ck_Age check (Age between 18 and 35) --创建唯一约束uniqueif exists(select * from sysobjects where name&#x3D;&#39;uq_StudentIdNo&#39;)alter table Students drop constraint uq_StudentIdNoalter table Studentsadd constraint uq_StudentIdNo unique (StudentIdNo)--创建身份证的长度检查约束if exists(select * from sysobjects where name&#x3D;&#39;ck_StudentIdNo&#39;)alter table Students drop constraint ck_StudentIdNoalter table Studentsadd constraint ck_StudentIdNo check (len(StudentIdNo)&#x3D;18)--创建默认约束 if exists(select * from sysobjects where name&#x3D;&#39;df_StudentAddress&#39;)alter table Students drop constraint df_StudentAddressalter table Students add constraint df_StudentAddress default (&#39;地址不详&#39; ) for StudentAddressif exists(select * from sysobjects where name&#x3D;&#39;df_UpdateTime&#39;)alter table ScoreList drop constraint df_UpdateTimealter table ScoreList add constraint df_UpdateTime default (getdate() ) for UpdateTime--创建外键约束if exists(select * from sysobjects where name&#x3D;&#39;fk_classId&#39;)alter table Students drop constraint fk_classIdalter table Studentsadd constraint fk_classId foreign key (ClassId) references StudentClass(ClassId)if exists(select * from sysobjects where name&#x3D;&#39;fk_StudentId&#39;)alter table ScoreList drop constraint fk_StudentIdalter table ScoreListadd constraint fk_StudentId foreign key(StudentId) references Students(StudentId)-------------------------------------------插入数据--------------------------------------use StudentManageDBgo--插入班级数据insert into StudentClass(ClassId,ClassName) values(1,&#39;软件1班&#39;)insert into StudentClass(ClassId,ClassName) values(2,&#39;软件2班&#39;)insert into StudentClass(ClassId,ClassName) values(3,&#39;计算机1班&#39;)insert into StudentClass(ClassId,ClassName) values(4,&#39;计算机2班&#39;)--insert into StudentClass(ClassId,ClassName) values(5,&#39;网络1班&#39;)--insert into StudentClass(ClassId,ClassName) values(6,&#39;网络2班&#39;)--插入学员信息insert into Students (StudentName,Gender,Birthday,Age,StudentIdNo,PhoneNumber,StudentAddress,ClassId) values(&#39;王小虎&#39;,&#39;男&#39;,&#39;1989-08-07&#39;,22,120223198908071111,&#39;022-22222222&#39;,&#39;天津市南开区红磡公寓5-5-102&#39;,1)insert into Students (StudentName,Gender,Birthday,Age,StudentIdNo,PhoneNumber,StudentAddress,ClassId) values(&#39;贺小张&#39;,&#39;女&#39;,&#39;1989-05-06&#39;,22,120223198905062426,&#39;022-33333333&#39;,&#39;天津市河北区王串场58号&#39;,2)insert into Students (StudentName,Gender,Birthday,Age,StudentIdNo,PhoneNumber,StudentAddress,ClassId) values(&#39;马小李&#39;,&#39;男&#39;,&#39;1990-02-07&#39;,21,120223199002078915,&#39;022-44444444&#39;,&#39;天津市红桥区丁字沽曙光路79号&#39;,4)insert into Students (StudentName,Gender,Birthday,Age,StudentIdNo,PhoneNumber,StudentAddress,ClassId) values(&#39;冯小强&#39;,&#39;女&#39;,&#39;1987-05-12&#39;,24,130223198705125167,&#39;022-55555555&#39;,default,2)insert into Students (StudentName,Gender,Birthday,Age,StudentIdNo,PhoneNumber,StudentAddress,ClassId) values(&#39;杜小丽&#39;,&#39;女&#39;,&#39;1986-05-08&#39;,25,130223198605081528,&#39;022-66666666&#39;,&#39;河北衡水路北道69号&#39;,1)insert into Students (StudentName,Gender,Birthday,Age,StudentIdNo,PhoneNumber,StudentAddress,ClassId) values(&#39;王俊桥&#39;,&#39;男&#39;,&#39;1987-07-18&#39;,24,130223198707182235,&#39;022-77777777&#39;,default,1)insert into Students (StudentName,Gender,Birthday,Age,StudentIdNo,PhoneNumber,StudentAddress,ClassId) values(&#39;张永利&#39;,&#39;男&#39;,&#39;1988-09-28&#39;,24,130223198909282235,&#39;022-88888888&#39;,&#39;河北保定市风华道12号&#39;,3)insert into Students (StudentName,Gender,Birthday,Age,StudentIdNo,PhoneNumber,StudentAddress,ClassId) values(&#39;李铭&#39;,&#39;男&#39;,&#39;1987-01-18&#39;,24,130223198701182257,&#39;022-99999999&#39;,&#39;河北邢台市幸福路5号&#39;,1)insert into Students (StudentName,Gender,Birthday,Age,StudentIdNo,PhoneNumber,StudentAddress,ClassId) values(&#39;宁俊燕&#39;,&#39;女&#39;,&#39;1987-06-15&#39;,24,130223198706152211,&#39;022-11111111&#39;,default,3)insert into Students (StudentName,Gender,Birthday,Age,StudentIdNo,PhoneNumber,StudentAddress,ClassId) values(&#39;刘玲玲&#39;,&#39;女&#39;,&#39;1989-08-19&#39;,24,130223198908192235,&#39;022-11111222&#39;,default,4) --插入成绩信息insert into ScoreList (StudentId,CSharp,SQLServerDB)values(100000,60,78)insert into ScoreList (StudentId,CSharp,SQLServerDB)values(100001,55,88)insert into ScoreList (StudentId,CSharp,SQLServerDB)values(100002,90,58)insert into ScoreList (StudentId,CSharp,SQLServerDB)values(100003,88,75)insert into ScoreList (StudentId,CSharp,SQLServerDB)values(100004,62,88)insert into ScoreList (StudentId,CSharp,SQLServerDB)values(100006,52,80)insert into ScoreList (StudentId,CSharp,SQLServerDB)values(100007,91,66)insert into ScoreList (StudentId,CSharp,SQLServerDB)values(100009,78,35)--插入管理员信息insert into Admins (LoginPwd,AdminName) values(123456,&#39;王晓军&#39;)insert into Admins (LoginPwd,AdminName) values(123456,&#39;张明丽&#39;)--删除学员信息--delete from Students --truncate table Students --删除全部数据以后，自动标识列重新编号--显示学员信息和班级信息select * from Studentsselect * from StudentClassselect * from ScoreListselect * from Admins","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"数据库基本模糊查询","slug":"数据库基本模糊查询","date":"2020-10-29T12:14:00.000Z","updated":"2020-10-30T13:46:36.212Z","comments":true,"path":"2020/10/29/数据库基本模糊查询/","link":"","permalink":"https://cyn51666.github.io/2020/10/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/","excerpt":"","text":"1. 查询过程与基本原理 查询与响应过程 理解查询 服务器执行命令，在原始数据表中查找符合条件的数据，产生一个虚拟表 虚拟表是数据组合后的重新展示，而不是原始的物理数据 2. 查询实现过程分析 简单查询过程 3. 基本查询 查询一般有四个基本组成部分 查询内容 select StudentId,StudentName,Gender 查询对象 from Students 过滤条件 where Gender=‘男’ 结果排序 order by StudentId DESC 基本查询语法框架 select &lt;列名&gt; from &lt;表名&gt; [where &lt;查询条件表达式&gt;] [order by &lt;排序的列名&gt;[ASC或DESC]] 注意：多个查询条件用and 使用AS或使用=重新命名字段 select StudentName as 姓名,Gender as 性别,出生年月=Birthday from Students where Gender = ‘男’ 加号的使用 select StudentName,地址和电话=StudentAddress +’(’+ PhoneNumber + ‘)’ from Students where Gender = ‘男’ 查询空列 insert into ScoreList(StudentId,CSharp)values(100009,78) select *from ScoreList where SQLServerDB is null 使用常量列 select Studentname,Gender,所在学校=‘天津大学’ from Students where Gender = ‘男’ and Age &gt;= 24 限制固定行数 select top 5 StudentName,Gender,Birthday from Students 返回百分之多少行 select top 20 percent StudentName,Gender,Birthday from Students 升序排列 select StudentId,(CSharp+5) as C#,DB = SQLServerDB from ScoreList where (CSharp+5) &gt; 90 order by CSharp ASC 降序排列 select StudentId,(CSharp+5) as C#,DB = SQLServerDB from ScoreList where (CSharp+5) &gt; 90 order by CSharp DESC,SQLServerDB ASC 4. 模糊查询 模糊查询LIKE 使用LIKE查询时，字段中的内容不一定与查询内容完全匹配，只要字段中包含这些内容即可 select StudentName,StudentAddress from Students where StudentAddress like ‘天津%’ select StudentName,StudentAddress from Students where StudentAddress like ‘%小%’ 模糊查询between 把某一字段中的值限定在特定范围内的记录查询出来 select *from ScoreList where CSharp between 80 and 90 select StudentName,Birthday from Students where Birthday between ‘1987-1-1’ and ‘1988-1-1’ 模糊查询in 把某一个字段中的内容与所列出的查询内容列表匹配的记录查询出来 select StudentName,Birthday,Age from Students where Age in (21,22,23) select StudentName,Birthday,Age from Students where StudentName in (‘小李’，‘小王’，‘小华’)","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"数据库键约束","slug":"数据库键约束","date":"2020-10-29T10:44:46.000Z","updated":"2020-10-30T12:20:14.658Z","comments":true,"path":"2020/10/29/数据库键约束/","link":"","permalink":"https://cyn51666.github.io/2020/10/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%94%AE%E7%BA%A6%E6%9D%9F/","excerpt":"","text":"数据完整性 观察并分析以下示例数据表中的数据 总结分析 当前数据存在不准确，不一致的数据，则数据库失去了完整性 数据完整性破坏一般由数据库的设计不合理导致，应避免出现 数据完整性概念 能确保存储在数据库中的数据的准确性和一致性 完整性约束的类型 常用三种类型的约束保证数据完整性 主键约束与唯一键约束 添加约束的基本语法 alter table 表名 add constraint 约束名 约束类型(具体的约束说明) 约束名的取名规则推荐采用：约束类型_约束字段 主键约束（Primary Key）：如 PK_StudentId 唯一键约束（Unique Key）：如 UQ_StudentIdNo 检查约束（Check Key）: 如 CK_Age 默认约束（Default Key）： 如 DF_StudentAddress 外键约束（Foreign Key）： 如 FK_ClassId 主键约束，唯一键约束，检查约束，默认约束，外键约束 1234567891011121314151617181920212223242526272829303132333435use StudentManageDBgo-创建主键约束Primary Keyif exists(select * from sysobjects where name &#x3D; &#39;pk_StudentId&#39;)alter table Students drop constrain pk_studentIdalter table Students add constrain pk_studentId primary key(studentId)-创建唯一键约束uniqueif exists(select * from sysobjects where name &#x3D; &#39;pk_StudentId&#39;)alter table Students drop constrain uk_studentIdNoalter table Students add constrain uk_studentIdNo unique(studentIdNo)-创建检查约束if exists(select * from sysobjects where name &#x3D; &#39;ck_Age&#39;)alter table Students drop constrain ck_Agealter table Students add constrain ck_Age check(Age between 18 and 35)if exists(select * from sysobjects where name &#x3D; &#39;ck_PhoneNumber&#39;)alter table Students drop constrain ck_PhoneNumberalter table Students add constrain ck_PhoneNumber check(len(PhoneNumber)&#x3D;11))-创建默认约束if exists(select * from sysobjects where name &#x3D; &#39;df_Address&#39;)alter table Students drop constrain df_Addressalter table Students add constrain df_Address deafult(&#39;地址不详&#39;) for StudentAddress-使用默认值插入数据insert into Students(StudentName,Gender,Birthday,Age,StudentNo,PhoneNumber,StudentAddress,ClassId)values(&#39;小刘&#39;,&#39;女&#39;,&#39;1998-10-10&#39;,24,123456789987654321,&#39;022-11111111&#39;,default,4)-外键约束if exists(select * from sysobjects where name &#x3D; &#39;fk_ClassId&#39;)alter table Students drop constrain fk_ClassIdalter table Students add constrain fk_ClassId foreign key(ClassId) reference StudentClass(ClassId)","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"数据的增删查改","slug":"数据的增删查改","date":"2020-10-28T23:06:51.000Z","updated":"2020-10-29T02:55:08.137Z","comments":true,"path":"2020/10/29/数据的增删查改/","link":"","permalink":"https://cyn51666.github.io/2020/10/29/%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9/","excerpt":"","text":"1. 插入实体（增） 插入实体（数据行语法） insert [into] &lt;表名&gt; values (值列表) 插入实体的SQL语句示例 1insert into Students(StudentName,Gender,Birthday,Age,StudentNo,PhoneNumber,StudentAddress,ClassId)values(&#39;马小南&#39;,&#39;男&#39;,&#39;1990-02-07&#39;,21,120223199002078915,&#39;022-888888&#39;,&#39;天津曙光路89号&#39;,4) 注意事项 列名个数=对应值个数 非值类型数据必须放在单引号内 数据值的类型必须与定义的字段类型一致 2. 删除实体（删） 删除数据表的基本语法 delete from &lt;表名&gt;[where&lt;删除条件&gt;] truncate table&lt;表名&gt; 注意：使用删除语句时，一定要注意where条件配合使用 删除实体的SQL语句示例 1delete from Students where StudentId&#x3D;100002 3. 查询实体（查） 查询基本语法 select &lt;列名&gt; from &lt;源表名&gt;[where&lt;查询条件&gt;] 查询实体的SQL语句示例 12select StudentId,StudentName from Students --查询两个字段 select * from Students 4. 更新实体（改） 更新实体语法 update &lt;表名&gt; set &lt;列名 = 更新值&gt;[where&lt;更新条件&gt;] 更新实体的SQL语句示例","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"sql语句的执行顺序","slug":"sql语句的执行顺序","date":"2020-10-28T22:11:51.000Z","updated":"2020-11-01T12:06:37.408Z","comments":true,"path":"2020/10/29/sql语句的执行顺序/","link":"","permalink":"https://cyn51666.github.io/2020/10/29/sql%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/","excerpt":"","text":"sql语句的执行顺序为 –第一步：执行FROM –第二步：WHERE条件过滤 –第三步：GROUP BY分组 –第四步：执行SELECT投影列，聚和函数例如count(*) –第五步：HAVING条件过滤 –第六步：执行ORDER BY 排序","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"sql运算符及优先级","slug":"sql运算符及优先级","date":"2020-10-28T21:35:51.000Z","updated":"2020-10-29T02:54:33.603Z","comments":true,"path":"2020/10/29/sql运算符及优先级/","link":"","permalink":"https://cyn51666.github.io/2020/10/29/sql%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%8A%E4%BC%98%E5%85%88%E7%BA%A7/","excerpt":"","text":"在sql语言中常用的运算符有以下几种： 12345678910111213141516171819201. 算术运算符 加 +、-（减）、*（乘）、&#x2F;（除）、%（取模，也就是商） 2. 赋值运算符 等号&quot;&#x3D;&quot;表示赋值，例如：Name&#x3D;‘王华’3. 比较运算符 等于&#x3D;&#x3D; 大于&gt; 小于&lt; 不等于&lt;&gt; 大于等于&gt;&#x3D; 小于等于&lt;&#x3D; 不等于!&#x3D;4. 逻辑运算符 逻辑运算符用来对某个条件进行判断，以获得判断的真假，返回带有true或false值得布尔数据类型 AND当且仅当两个布尔表达式都为true时，返回true OR当且仅当两个布尔表达式都为false时，返回false NOT对布尔表达式的值取反，优先级别最高 数据库常用的运算符的优先级","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"sql数据类型","slug":"sql数据类型","date":"2020-10-28T20:55:50.000Z","updated":"2020-10-29T02:54:41.363Z","comments":true,"path":"2020/10/29/sql数据类型/","link":"","permalink":"https://cyn51666.github.io/2020/10/29/sql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"SQLServer数据类型 1. 文本类型 char:固定长度的非Unicode字符数据，最大长度为8000个字符 vchar:可变长度的非Unicode数据，最大长度为8000个字符 text:存储长文本信息，最大长度为2^31-1(2147483647)个字符 nchar:固定长度的Unicode数据，最大长度为4000个字符 nvchar:固定长度的Unicode数据，最大长度为4000个字符 text:存储可变长文本信息，最大长度为2^30-1个字符 注意： Unicode是国际组织制定的可以容纳世界上所有文字和字符的编码方案 带n的数据类型长度是不带n的两倍，比如nchar(1)和char(2)长度相同 2. 值类型 整数类型 精确数字类型 近似数字（浮点）类型 3. 日期类型 注意：日期在使用时要用单引号（’’）括起来，建议都使用datetime 4. 货币类型 5. 位类型 6. 二进制类型","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"多表之间的数据查询","slug":"多表之间的数据查询","date":"2020-10-28T19:00:51.000Z","updated":"2020-11-02T13:35:18.286Z","comments":true,"path":"2020/10/29/多表之间的数据查询/","link":"","permalink":"https://cyn51666.github.io/2020/10/29/%E5%A4%9A%E8%A1%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/","excerpt":"","text":"1. 内连接查询 内连接（inner join …on…）查询 测试 1234select Students.StudentId,C#成绩&#x3D;CSharp,StudentName from ScoreList inner join Students on Students.StudentId &#x3D; Scorelist.StudentIdwhere CSharp &gt; 80go 2. 左外连接查询 左外连接（left outer join …on…） 测试 123select Students.StudentId,StudentName,Gender,CSharp from ScoreList left outer join Students on Students.StudentId&#x3D;ScoreList.Student.Idwhere Gender&#x3D;&#39;男&#39; 3. 右外连接 右外连接（right outer join…on…）查询 测试 insert into StudentClass(ClassId,ClassName)values(5,'计算机5班') select Students.StudentId,StidentName,CSharp from Students right outer join StudentClass on Students.ClassId=StudentClass.ClassId","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"数据表的创建","slug":"数据表的创建","date":"2020-10-28T19:00:51.000Z","updated":"2020-10-29T02:57:09.683Z","comments":true,"path":"2020/10/29/数据表的创建/","link":"","permalink":"https://cyn51666.github.io/2020/10/29/%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%84%E5%88%9B%E5%BB%BA/","excerpt":"","text":"1. 建表的基本语法 1234567create table 表名( 字段1 数据类型 列的特征, 字段2 数据类型 列的特征, ...)go 2. 列的特征包含的内容 是否为空（NULL）: 在输入数据时，数据的列允许为空时，可以不输入数据，否则必须输入。列是否为空要根据数据库的设计具体要求决定，对关键列必须禁止为空 是否标识列（自动编号） 是否有默认值：如果数据表的某列在用户不输入数据时，希望提供一个默认的内容，比如：用户不输入学员地址，则默认地址不详 是否为主键：主键是实体的唯一标识，保证实体不被重复。 3. 实践 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475use mastergo--判断当前数据库是否存在if exists(select * from sysdatabases where name&#x3D;&#39;StudentmanManageDB&#39;)drop database StudentManageDBgo--创建数据表create database StudentManageDBon primary( name&#x3D;&#39;StudentManageDB&#39;,--数据库名 filename&#x3D;E:\\DB\\StudentManageDB.mdf,--文件名 size&#x3D;10MB,--初始数据库的大小 filegrowth&#x3D;5MB--数据自动增长)log on ( name&#x3D;&#39;StudentManageDB_log&#39;,--数据库名 filename&#x3D;E:\\DB\\StudentManageDB_log.ldf,--文件名 size&#x3D;10MB,--初始数据库的大小 filegrowth&#x3D;5MB--数据自动增长)--创建数据表use StudentManageDBgoif exists(select * from sysobjects where name &#x3D; &#39;Sududents&#39;)drop table Studentsgo create table Students( StudentId int identity(10000,1) ,--学号设置为标识列，从10000开始每次自动增长1 StudentName varchar(20) not null ,--姓名 Gender char(2) not null,--性别 Birthday datetime not null,--出生日期 StudentIdNo numeric(18,0) not null,--身份证号 Age int not null,--年龄 PhoneNumber varchar(50), StudentAddress varchar(500),--电话号码)go--创建班级表if exists(select * from sysobjects where name &#x3D; &#39;SududentClass&#39;)drop table StudentClassgo create table StudentClass( ClassId int primary key,--班级编号，主键，直接定义 ClassName vchar(20) not null,)--创建成绩表if exists(select * from sysobjects where name &#x3D; &#39;ScoreList&#39;)drop table ScoreListgo create table ScoreList( Id int identity(1,1), StudentId int not null,--学号，外键 CSharp int null, --CSharp成绩允许为空 SQL int null, UpdateTime datetime not null,--更新时间)go--创建管理员数据表if exists(select * from sysobjects where name &#x3D; &#39;Admins&#39;)drop table Adminsgo create table Admins( LoginId int identity(1000,1) primary key, LoginPwd varchar(20) not null,--登录密码 AdminName varchar(20) not null)go 4. 批处理语句 go go是批处理的标志，表示SQLServer将这些SQL语句编译为一个执行单元，提高执行效率。一般是将一些逻辑相关的业务操作语句放在同一批中，这完全由业务需求和代码编写者决定 go是SQLServer的批处理命令，只有代码编辑器才能识别并处理，编辑其他应用程序就不能使用该命令。由于每个批处理之间是独立的，因此，在一个批处理出现错误时，并不会影响其他批处理中的SQL代码的运行","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"数据据库的创建2","slug":"数据库的创建2","date":"2020-10-28T17:49:46.000Z","updated":"2020-10-29T02:53:40.847Z","comments":true,"path":"2020/10/29/数据库的创建2/","link":"","permalink":"https://cyn51666.github.io/2020/10/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%88%9B%E5%BB%BA2/","excerpt":"","text":"1. 创建多个数据文件和日志文件 创建多个数据文件和日志文件 注意：创建多个数据文件和日志文件要用逗号分开，数据库文件名不能重复 123456789101112131415161718192021use mastergo--判断当前数据库是否存在if exists(select * from sysdatabases where name&#x3D;&#39;StudentmanManageDB&#39;)drop database StudentManageDBgocreate database StudentManageDBon primary( name&#x3D;&#39;StudentManageDB&#39;,--数据库名 filename&#x3D;E:\\DB\\StudentManageDB.mdf,--文件名 size&#x3D;10MB,--初始数据库的大小 filegrowth&#x3D;5MB--数据自动增长)log on ( name&#x3D;&#39;StudentManageDB_log&#39;,--数据库名 filename&#x3D;E:\\DB\\StudentManageDB_log.ldf,--文件名 size&#x3D;10MB,--初始数据库的大小 filegrowth&#x3D;5MB--数据自动增长) 2. 分离与附加数据库","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"数据据库的创建1","slug":"数据库的创建1","date":"2020-10-28T16:48:46.000Z","updated":"2020-10-29T02:53:27.117Z","comments":true,"path":"2020/10/29/数据库的创建1/","link":"","permalink":"https://cyn51666.github.io/2020/10/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%88%9B%E5%BB%BA1/","excerpt":"","text":"数据库的创建1 1. 基本概念 创建数据库： create database phpDb 删除数据库： drop database phpDb 2. 数据库分类 1. 系统数据库 master: 保存已有数据库的信息（系统登录，配置设置，已连接的SERVER等） model: 创建新用户数据库的模板数据库 msdb: 用来保存数据库备份，SQL Agent信息，DTS程序包，SQLSERVER任务等信息 tempdb: 存有临时对象，例如临时表格和存储过程 2. 用户数据库 用户数据库的组成: 主数据文件+日志文件 3. 创建数据库例子 --指向当前要使用的数据库 use master go --创建数据库 create database StudentManageDB on primary ( --数据库的逻辑名 name = 'StudentManageDB_data', --数据库的物理文件名（绝对路径） filename='E:/D/StudentManage_data.mdf', --数据库文件初始大小 size=10MB, --数据文件增长量 filegrowth=1MB ) log on ( name = 'StudentManageDB_log', filename = 'StudentManageDB_log.ldf', size=2MB, filegrowth=1MB ) go primary代表主文件组，主要用于管理磁盘空间，文件组分为主文件组和次文件组，日志文件不属于任何文件组","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"CSharp实体类在开发中的应用","slug":"CSharp实体类在开发中的应用","date":"2020-10-12T12:48:48.000Z","updated":"2020-11-02T08:19:16.398Z","comments":true,"path":"2020/10/12/CSharp实体类在开发中的应用/","link":"","permalink":"https://cyn51666.github.io/2020/10/12/CSharp%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%9C%A8%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/","excerpt":"","text":"前后台代码混编的缺点 程序编写人员必须非常实习后台数据的设计 业务逻辑复杂时很难查找错误且不利于后期维护 不符合面向对象的设计思想 问题解决 将数据展示代码和数据访问代码分离 根据当前需要访问的后台实体，创建一个对应的数据访问类 将对该实体操作的方法封装到对应的访问类中","categories":[{"name":"CSharp","slug":"CSharp","permalink":"https://cyn51666.github.io/categories/CSharp/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"CSharp对象职责明确原则","slug":"CSharp职责明确原则","date":"2020-10-12T12:48:47.000Z","updated":"2020-11-02T08:18:51.076Z","comments":true,"path":"2020/10/12/CSharp职责明确原则/","link":"","permalink":"https://cyn51666.github.io/2020/10/12/CSharp%E8%81%8C%E8%B4%A3%E6%98%8E%E7%A1%AE%E5%8E%9F%E5%88%99/","excerpt":"","text":"前后台代码混编的缺点 程序编写人员必须非常实习后台数据的设计 业务逻辑复杂时很难查找错误且不利于后期维护 不符合面向对象的设计思想 问题解决 将数据展示代码和数据访问代码分离 根据当前需要访问的后台实体，创建一个对应的数据访问类 将对该实体操作的方法封装到对应的访问类中","categories":[{"name":"CSharp","slug":"CSharp","permalink":"https://cyn51666.github.io/categories/CSharp/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"CSharp方法参数过多的缺点","slug":"CSharp方法参数过多的缺点","date":"2020-10-12T12:48:46.000Z","updated":"2020-11-02T08:18:34.779Z","comments":true,"path":"2020/10/12/CSharp方法参数过多的缺点/","link":"","permalink":"https://cyn51666.github.io/2020/10/12/CSharp%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E8%BF%87%E5%A4%9A%E7%9A%84%E7%BC%BA%E7%82%B9/","excerpt":"","text":"方法参数过多的缺点 定义和使用不方便，很容易把参数写错 当对象的属性变化时，方法的参数必须改变 参数的改变，造成对象接口不稳定，降低了可维护性，可扩展性和安全性，与面向对象原则相悖 方法参数多，不符合面向对象的低耦合，高内聚的要求 后台方法的编写依赖数据库的完成 前台代码实现依赖后台方法的完成，团队中无法并行开发 问题思路与解决 为类的设计提供一个规范，稳定对象的接口 不同开发人员只需要按照规范接口即可同步开发 问题解决办法 使用“实体类”作为方法参数，稳定对外接口","categories":[{"name":"CSharp","slug":"CSharp","permalink":"https://cyn51666.github.io/categories/CSharp/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"再别康桥2","slug":"再别康桥2","date":"2020-10-12T04:26:46.000Z","updated":"2020-10-23T03:22:11.725Z","comments":true,"path":"2020/10/12/再别康桥2/","link":"","permalink":"https://cyn51666.github.io/2020/10/12/%E5%86%8D%E5%88%AB%E5%BA%B7%E6%A1%A52/","excerpt":"","text":"那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。","categories":[{"name":"hexo","slug":"hexo","permalink":"https://cyn51666.github.io/categories/hexo/"}],"tags":[{"name":"基础","slug":"基础","permalink":"https://cyn51666.github.io/tags/%E5%9F%BA%E7%A1%80/"}]},{"title":"再别康桥1","slug":"再别康桥1","date":"2020-10-11T04:26:46.000Z","updated":"2020-10-12T07:50:21.306Z","comments":true,"path":"2020/10/11/再别康桥1/","link":"","permalink":"https://cyn51666.github.io/2020/10/11/%E5%86%8D%E5%88%AB%E5%BA%B7%E6%A1%A51/","excerpt":"","text":"轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。","categories":[{"name":"hexo","slug":"hexo","permalink":"https://cyn51666.github.io/categories/hexo/"}],"tags":[{"name":"基础","slug":"基础","permalink":"https://cyn51666.github.io/tags/%E5%9F%BA%E7%A1%80/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-10-11T04:23:51.777Z","updated":"2020-10-11T04:23:51.777Z","comments":true,"path":"2020/10/11/hello-world/","link":"","permalink":"https://cyn51666.github.io/2020/10/11/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"},{"name":"CSharp","slug":"CSharp","permalink":"https://cyn51666.github.io/categories/CSharp/"},{"name":"hexo","slug":"hexo","permalink":"https://cyn51666.github.io/categories/hexo/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"基础","slug":"基础","permalink":"https://cyn51666.github.io/tags/%E5%9F%BA%E7%A1%80/"}]}