{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"https://cyn51666.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-10-11T05:36:04.654Z","updated":"2020-10-11T05:36:04.654Z","comments":false,"path":"/404.html","permalink":"https://cyn51666.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2020-10-11T05:36:04.655Z","updated":"2020-10-11T05:36:04.655Z","comments":false,"path":"about/index.html","permalink":"https://cyn51666.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2020-10-11T05:36:04.655Z","updated":"2020-10-11T05:36:04.655Z","comments":false,"path":"books/index.html","permalink":"https://cyn51666.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-10-11T06:30:37.118Z","updated":"2020-10-11T05:36:04.655Z","comments":false,"path":"categories/index.html","permalink":"https://cyn51666.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-10-11T06:31:03.948Z","updated":"2020-10-11T05:36:04.656Z","comments":false,"path":"tags/index.html","permalink":"https://cyn51666.github.io/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-10-11T05:36:04.656Z","updated":"2020-10-11T05:36:04.656Z","comments":true,"path":"links/index.html","permalink":"https://cyn51666.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-10-11T05:36:04.656Z","updated":"2020-10-11T05:36:04.656Z","comments":false,"path":"repository/index.html","permalink":"https://cyn51666.github.io/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"数据的增删查改","slug":"数据的增删查改","date":"2020-10-29T02:06:51.000Z","updated":"2020-10-29T02:11:17.011Z","comments":true,"path":"2020/10/29/数据的增删查改/","link":"","permalink":"https://cyn51666.github.io/2020/10/29/%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9/","excerpt":"","text":"1. 插入实体（增） 插入实体（数据行语法） insert [into] &lt;表名&gt; values (值列表) 插入实体的SQL语句示例 1insert into Students(StudentName,Gender,Birthday,Age,StudentNo,PhoneNumber,StudentAddress,ClassId)values(&#39;马小南&#39;,&#39;男&#39;,&#39;1990-02-07&#39;,21,120223199002078915,&#39;022-888888&#39;,&#39;天津曙光路89号&#39;,4) 注意事项 列名个数=对应值个数 非值类型数据必须放在单引号内 数据值的类型必须与定义的字段类型一致 2. 删除实体（删） 删除数据表的基本语法 delete from &lt;表名&gt;[where&lt;删除条件&gt;] truncate table&lt;表名&gt; 注意：使用删除语句时，一定要注意where条件配合使用 删除实体的SQL语句示例 1delete from Students where StudentId&#x3D;100002 3. 查询实体（查） 查询基本语法 select &lt;列名&gt; from &lt;源表名&gt;[where&lt;查询条件&gt;] 查询实体的SQL语句示例 12select StudentId,StudentName from Students --查询两个字段 select * from Students 4. 更新实体（改） 更新实体语法 update &lt;表名&gt; set &lt;列名 = 更新值&gt;[where&lt;更新条件&gt;] 更新实体的SQL语句示例","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"sql语句的执行顺序","slug":"sql语句的执行顺序","date":"2020-10-29T01:11:51.000Z","updated":"2020-10-29T01:51:58.244Z","comments":true,"path":"2020/10/29/sql语句的执行顺序/","link":"","permalink":"https://cyn51666.github.io/2020/10/29/sql%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/","excerpt":"","text":"sql语句的执行顺序为 –第一步：执行FROM –第二步：WHERE条件过滤 –第三步：GROUP BY分组 –第四步：执行SELECT投影列，聚集函数例如count(*) –第五步：HAVING条件过滤 –第六步：执行ORDER BY 排序","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"sql中的运算符","slug":"sql中的运算符","date":"2020-10-28T13:35:51.000Z","updated":"2020-10-29T02:19:43.218Z","comments":true,"path":"2020/10/28/sql中的运算符/","link":"","permalink":"https://cyn51666.github.io/2020/10/28/sql%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/","excerpt":"","text":"在sql语言中常用的运算符有以下几种： 算术运算符 +（加）、-（减）、*（乘）、/（除）、%（取模，也就是商） 赋值运算符 “=”（等号）表示赋值，例如：Name=‘王华’ 比较运算符 ==等于 &gt;大于 &lt;小于 &lt;&gt;不等于 &gt;=大于等于 &lt;=小于等于 !=不等于 逻辑运算符 逻辑运算符用来对某个条件进行判断，以获得判断的真假，返回带有true或false值得布尔数据类型 AND当且仅当两个布尔表达式都为true时，返回true OR当且仅当两个布尔表达式都为false时，返回false NOT对布尔表达式的值取反，优先级别最高 数据库常用的运算符的优先级","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"数据表的创建","slug":"数据表的创建","date":"2020-10-28T12:00:51.000Z","updated":"2020-10-29T01:51:24.680Z","comments":true,"path":"2020/10/28/数据表的创建/","link":"","permalink":"https://cyn51666.github.io/2020/10/28/%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%84%E5%88%9B%E5%BB%BA/","excerpt":"","text":"1. 建表的基本语法 1234567create table 表名( 字段1 数据类型 列的特征, 字段2 数据类型 列的特征, ...)go 2. 列的特征包含的内容 是否为空（NULL）: 在输入数据时，数据的列允许为空时，可以不输入数据，否则必须输入。列是否为空要根据数据库的设计具体要求决定，对关键列必须禁止为空 是否标识列（自动编号） 是否有默认值：如果数据表的某列在用户不输入数据时，希望提供一个默认的内容，比如：用户不输入学员地址，则默认地址不详 是否为主键：主键是实体的唯一标识，保证实体不被重复。 3. 实践 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475use mastergo--判断当前数据库是否存在if exists(select * from sysdatabases where name&#x3D;&#39;StudentmanManageDB&#39;)drop database StudentManageDBgo--创建数据表create database StudentManageDBon primary( name&#x3D;&#39;StudentManageDB&#39;,--数据库名 filename&#x3D;E:\\DB\\StudentManageDB.mdf,--文件名 size&#x3D;10MB,--初始数据库的大小 filegrowth&#x3D;5MB--数据自动增长)log on ( name&#x3D;&#39;StudentManageDB_log&#39;,--数据库名 filename&#x3D;E:\\DB\\StudentManageDB_log.ldf,--文件名 size&#x3D;10MB,--初始数据库的大小 filegrowth&#x3D;5MB--数据自动增长)--创建数据表use StudentManageDBgoif exists(select * from sysobjects where name &#x3D; &#39;Sududents&#39;)drop table Studentsgo create table Students( StudentId int identity(10000,1) ,--学号设置为标识列，从10000开始每次自动增长1 StudentName varchar(20) not null ,--姓名 Gender char(2) not null,--性别 Birthday datetime not null,--出生日期 StudentIdNo numeric(18,0) not null,--身份证号 Age int not null,--年龄 PhoneNumber varchar(50), StudentAddress varchar(500),--电话号码)go--创建班级表if exists(select * from sysobjects where name &#x3D; &#39;SududentClass&#39;)drop table StudentClassgo create table StudentClass( ClassId int primary key,--班级编号，主键，直接定义 ClassName vchar(20) not null,)--创建成绩表if exists(select * from sysobjects where name &#x3D; &#39;ScoreList&#39;)drop table ScoreListgo create table ScoreList( Id int identity(1,1), StudentId int not null,--学号，外键 CSharp int null, --CSharp成绩允许为空 SQL int null, UpdateTime datetime not null,--更新时间)go--创建管理员数据表if exists(select * from sysobjects where name &#x3D; &#39;Admins&#39;)drop table Adminsgo create table Admins( LoginId int identity(1000,1) primary key, LoginPwd varchar(20) not null,--登录密码 AdminName varchar(20) not null)go 4. 批处理语句 go go是批处理的标志，表示SQLServer将这些SQL语句编译为一个执行单元，提高执行效率。一般是将一些逻辑相关的业务操作语句放在同一批中，这完全由业务需求和代码编写者决定 go是SQLServer的批处理命令，只有代码编辑器才能识别并处理，编辑其他应用程序就不能使用该命令。由于每个批处理之间是独立的，因此，在一个批处理出现错误时，并不会影响其他批处理中的SQL代码的运行","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"sql数据类型","slug":"sql数据类型","date":"2020-10-28T11:55:50.000Z","updated":"2020-10-29T01:51:52.414Z","comments":true,"path":"2020/10/28/sql数据类型/","link":"","permalink":"https://cyn51666.github.io/2020/10/28/sql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"SQLServer数据类型 1. 文本类型 1. char:固定长度的非Unicode字符数据，最大长度为8000个字符 2. vchar:可变长度的非Unicode数据，最大长度为8000个字符 3. text:存储长文本信息，最大长度为2^31-1(2147483647)个字符 4. nchar:固定长度的Unicode数据，最大长度为4000个字符 5. nvchar:固定长度的Unicode数据，最大长度为4000个字符 6. text:存储可变长文本信息，最大长度为2^30-1个字符 注意： 1. Unicode是国际组织制定的可以容纳世界上所有文字和字符的编码方案 2. 带n的数据类型长度是不带n的两倍，比如nchar(1)和char(2)长度相同 2. 值类型 1. 整数类型 ![20201028192808](https://raw.githubusercontent.com/cyn51666/Blog-images/master/20201028192808.png) 2. 精确数字类型 ![20201028192848](https://raw.githubusercontent.com/cyn51666/Blog-images/master/20201028192848.png) 3. 近似数字（浮点）类型 ![20201028192911](https://raw.githubusercontent.com/cyn51666/Blog-images/master/20201028192911.png) 3. 日期类型 注意：日期在使用时要用单引号（’’）括起来，建议都使用datetime 4. 货币类型 5. 位类型 6. 二进制类型","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"数据据库的创建2","slug":"数据库的创建2","date":"2020-10-28T11:49:46.000Z","updated":"2020-10-29T01:50:57.518Z","comments":true,"path":"2020/10/28/数据库的创建2/","link":"","permalink":"https://cyn51666.github.io/2020/10/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%88%9B%E5%BB%BA2/","excerpt":"","text":"1. 创建多个数据文件和日志文件 创建多个数据文件和日志文件 注意：创建多个数据文件和日志文件要用逗号分开，数据库文件名不能重复 123456789101112131415161718192021use mastergo--判断当前数据库是否存在if exists(select * from sysdatabases where name&#x3D;&#39;StudentmanManageDB&#39;)drop database StudentManageDBgocreate database StudentManageDBon primary( name&#x3D;&#39;StudentManageDB&#39;,--数据库名 filename&#x3D;E:\\DB\\StudentManageDB.mdf,--文件名 size&#x3D;10MB,--初始数据库的大小 filegrowth&#x3D;5MB--数据自动增长)log on ( name&#x3D;&#39;StudentManageDB_log&#39;,--数据库名 filename&#x3D;E:\\DB\\StudentManageDB_log.ldf,--文件名 size&#x3D;10MB,--初始数据库的大小 filegrowth&#x3D;5MB--数据自动增长) 2. 分离与附加数据库","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"数据据库的创建1","slug":"数据库的创建1","date":"2020-10-28T11:48:46.000Z","updated":"2020-10-29T01:50:31.916Z","comments":true,"path":"2020/10/28/数据库的创建1/","link":"","permalink":"https://cyn51666.github.io/2020/10/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%88%9B%E5%BB%BA1/","excerpt":"","text":"数据库的创建1 1. 基本概念 创建数据库： create database phpDb 删除数据库： drop database phpDb 2. 数据库分类 1. 系统数据库 master: 保存已有数据库的信息（系统登录，配置设置，已连接的SERVER等） model: 创建新用户数据库的模板数据库 msdb: 用来保存数据库备份，SQL Agent信息，DTS程序包，SQLSERVER任务等信息 tempdb: 存有临时对象，例如临时表格和存储过程 2. 用户数据库 用户数据库的组成: 主数据文件+日志文件 3. 创建数据库例子 --指向当前要使用的数据库 use master go --创建数据库 create database StudentManageDB on primary ( --数据库的逻辑名 name = 'StudentManageDB_data', --数据库的物理文件名（绝对路径） filename='E:/D/StudentManage_data.mdf', --数据库文件初始大小 size=10MB, --数据文件增长量 filegrowth=1MB ) log on ( name = 'StudentManageDB_log', filename = 'StudentManageDB_log.ldf', size=2MB, filegrowth=1MB ) go primary代表主文件组，主要用于管理磁盘空间，文件组分为主文件组和次文件组，日志文件不属于任何文件组","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"C Sharp实体类在开发中的应用","slug":"C Sharp实体类在开发中的应用","date":"2020-10-12T12:48:48.000Z","updated":"2020-10-13T00:29:13.795Z","comments":true,"path":"2020/10/12/C Sharp实体类在开发中的应用/","link":"","permalink":"https://cyn51666.github.io/2020/10/12/C%20Sharp%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%9C%A8%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/","excerpt":"","text":"前后台代码混编的缺点 程序编写人员必须非常实习后台数据的设计 业务逻辑复杂时很难查找错误且不利于后期维护 不符合面向对象的设计思想 问题解决 将数据展示代码和数据访问代码分离 根据当前需要访问的后台实体，创建一个对应的数据访问类 将对该实体操作的方法封装到对应的访问类中","categories":[{"name":"C Sharp","slug":"C-Sharp","permalink":"https://cyn51666.github.io/categories/C-Sharp/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"C Sharp对象职责明确原则","slug":"C Sharp职责明确原则","date":"2020-10-12T12:48:47.000Z","updated":"2020-10-13T00:27:10.922Z","comments":true,"path":"2020/10/12/C Sharp职责明确原则/","link":"","permalink":"https://cyn51666.github.io/2020/10/12/C%20Sharp%E8%81%8C%E8%B4%A3%E6%98%8E%E7%A1%AE%E5%8E%9F%E5%88%99/","excerpt":"","text":"前后台代码混编的缺点 程序编写人员必须非常实习后台数据的设计 业务逻辑复杂时很难查找错误且不利于后期维护 不符合面向对象的设计思想 问题解决 将数据展示代码和数据访问代码分离 根据当前需要访问的后台实体，创建一个对应的数据访问类 将对该实体操作的方法封装到对应的访问类中","categories":[{"name":"C Sharp","slug":"C-Sharp","permalink":"https://cyn51666.github.io/categories/C-Sharp/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"C Sharp方法参数过多的缺点","slug":"C Sharp方法参数过多的缺点","date":"2020-10-12T12:48:46.000Z","updated":"2020-10-13T00:19:54.553Z","comments":true,"path":"2020/10/12/C Sharp方法参数过多的缺点/","link":"","permalink":"https://cyn51666.github.io/2020/10/12/C%20Sharp%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E8%BF%87%E5%A4%9A%E7%9A%84%E7%BC%BA%E7%82%B9/","excerpt":"","text":"方法参数过多的缺点 定义和使用不方便，很容易把参数写错 当对象的属性变化时，方法的参数必须改变 参数的改变，造成对象接口不稳定，降低了可维护性，可扩展性和安全性，与面向对象原则相悖 方法参数多，不符合面向对象的低耦合，高内聚的要求 后台方法的编写依赖数据库的完成 前台代码实现依赖后台方法的完成，团队中无法并行开发 问题思路与解决 为类的设计提供一个规范，稳定对象的接口 不同开发人员只需要按照规范接口即可同步开发 问题解决办法 使用“实体类”作为方法参数，稳定对外接口","categories":[{"name":"C Sharp","slug":"C-Sharp","permalink":"https://cyn51666.github.io/categories/C-Sharp/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"再别康桥2","slug":"再别康桥2","date":"2020-10-12T04:26:46.000Z","updated":"2020-10-23T03:22:11.725Z","comments":true,"path":"2020/10/12/再别康桥2/","link":"","permalink":"https://cyn51666.github.io/2020/10/12/%E5%86%8D%E5%88%AB%E5%BA%B7%E6%A1%A52/","excerpt":"","text":"那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。","categories":[{"name":"hexo","slug":"hexo","permalink":"https://cyn51666.github.io/categories/hexo/"}],"tags":[{"name":"基础","slug":"基础","permalink":"https://cyn51666.github.io/tags/%E5%9F%BA%E7%A1%80/"}]},{"title":"再别康桥1","slug":"再别康桥1","date":"2020-10-11T04:26:46.000Z","updated":"2020-10-12T07:50:21.306Z","comments":true,"path":"2020/10/11/再别康桥1/","link":"","permalink":"https://cyn51666.github.io/2020/10/11/%E5%86%8D%E5%88%AB%E5%BA%B7%E6%A1%A51/","excerpt":"","text":"轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。","categories":[{"name":"hexo","slug":"hexo","permalink":"https://cyn51666.github.io/categories/hexo/"}],"tags":[{"name":"基础","slug":"基础","permalink":"https://cyn51666.github.io/tags/%E5%9F%BA%E7%A1%80/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-10-11T04:23:51.777Z","updated":"2020-10-11T04:23:51.777Z","comments":true,"path":"2020/10/11/hello-world/","link":"","permalink":"https://cyn51666.github.io/2020/10/11/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://cyn51666.github.io/categories/SQL-Server/"},{"name":"C Sharp","slug":"C-Sharp","permalink":"https://cyn51666.github.io/categories/C-Sharp/"},{"name":"hexo","slug":"hexo","permalink":"https://cyn51666.github.io/categories/hexo/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"基础","slug":"基础","permalink":"https://cyn51666.github.io/tags/%E5%9F%BA%E7%A1%80/"}]}