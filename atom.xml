<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://cyn51666.github.io/atom.xml" rel="self"/>
  
  <link href="https://cyn51666.github.io/"/>
  <updated>2020-10-29T02:11:17.011Z</updated>
  <id>https://cyn51666.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据的增删查改</title>
    <link href="https://cyn51666.github.io/2020/10/29/%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9/"/>
    <id>https://cyn51666.github.io/2020/10/29/%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9/</id>
    <published>2020-10-29T02:06:51.000Z</published>
    <updated>2020-10-29T02:11:17.011Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-插入实体增"><a class="markdownIt-Anchor" href="#1-插入实体增"></a> 1. 插入实体（增）</h2><ol><li><p>插入实体（数据行语法）<br />insert [into] &lt;表名&gt; values (值列表)</p></li><li><p>插入实体的SQL语句示例</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into Students(StudentName,Gender,Birthday,Age,StudentNo,PhoneNumber,StudentAddress,ClassId)values(&#39;马小南&#39;,&#39;男&#39;,&#39;1990-02-07&#39;,21,120223199002078915,&#39;022-888888&#39;,&#39;天津曙光路89号&#39;,4)</span><br></pre></td></tr></table></figure><ol start="3"><li>注意事项<ol><li>列名个数=对应值个数</li><li>非值类型数据必须放在单引号内</li><li>数据值的类型必须与定义的字段类型一致</li></ol></li></ol><h2 id="2-删除实体删"><a class="markdownIt-Anchor" href="#2-删除实体删"></a> 2. 删除实体（删）</h2><ol><li><p>删除数据表的基本语法<br />delete from &lt;表名&gt;[where&lt;删除条件&gt;]<br />truncate table&lt;表名&gt;<br />注意：使用删除语句时，一定要注意where条件配合使用</p></li><li><p>删除实体的SQL语句示例</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from Students where StudentId&#x3D;100002</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/cyn51666/Blog-images/master/20201028215730.png" alt="20201028215730" /></p><h2 id="3-查询实体查"><a class="markdownIt-Anchor" href="#3-查询实体查"></a> 3. 查询实体（查）</h2><ol><li><p>查询基本语法<br />select &lt;列名&gt; from &lt;源表名&gt;[where&lt;查询条件&gt;]</p></li><li><p>查询实体的SQL语句示例</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select StudentId,StudentName from Students --查询两个字段  </span><br><span class="line">select * from Students  </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/cyn51666/Blog-images/master/20201028213308.png" alt="20201028213308" /></p><h2 id="4-更新实体改"><a class="markdownIt-Anchor" href="#4-更新实体改"></a> 4. 更新实体（改）</h2><ol><li>更新实体语法<br />update &lt;表名&gt; set &lt;列名 = 更新值&gt;[where&lt;更新条件&gt;]</li><li>更新实体的SQL语句示例<br /><img src="https://raw.githubusercontent.com/cyn51666/Blog-images/master/20201028214314.png" alt="20201028214314" /></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-插入实体增&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-插入实体增&quot;&gt;&lt;/a&gt; 1. 插入实体（增）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;插入实体（数据行语法）&lt;br /&gt;
insert [into] &amp;lt;表名&amp;gt; v</summary>
      
    
    
    
    <category term="SQL Server" scheme="https://cyn51666.github.io/categories/SQL-Server/"/>
    
    
    <category term="笔记" scheme="https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>sql语句的执行顺序</title>
    <link href="https://cyn51666.github.io/2020/10/29/sql%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <id>https://cyn51666.github.io/2020/10/29/sql%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</id>
    <published>2020-10-29T01:11:51.000Z</published>
    <updated>2020-10-29T01:51:58.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sql语句的执行顺序为"><a class="markdownIt-Anchor" href="#sql语句的执行顺序为"></a> sql语句的执行顺序为</h2><p>–第一步：执行FROM</p><p>–第二步：WHERE条件过滤</p><p>–第三步：GROUP BY分组</p><p>–第四步：执行SELECT投影列，聚集函数例如count(*)</p><p>–第五步：HAVING条件过滤</p><p>–第六步：执行ORDER BY 排序</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;sql语句的执行顺序为&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sql语句的执行顺序为&quot;&gt;&lt;/a&gt; sql语句的执行顺序为&lt;/h2&gt;
&lt;p&gt;–第一步：执行FROM&lt;/p&gt;
&lt;p&gt;–第二步：WHERE条件过滤&lt;/p&gt;
&lt;p&gt;–第三步</summary>
      
    
    
    
    <category term="SQL Server" scheme="https://cyn51666.github.io/categories/SQL-Server/"/>
    
    
    <category term="笔记" scheme="https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>sql运算符及优先级</title>
    <link href="https://cyn51666.github.io/2020/10/28/sql%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%8A%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>https://cyn51666.github.io/2020/10/28/sql%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%8A%E4%BC%98%E5%85%88%E7%BA%A7/</id>
    <published>2020-10-28T13:35:51.000Z</published>
    <updated>2020-10-29T02:35:31.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在sql语言中常用的运算符有以下几种"><a class="markdownIt-Anchor" href="#在sql语言中常用的运算符有以下几种"></a> 在sql语言中常用的运算符有以下几种：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1. 算术运算符  </span><br><span class="line">加 +、-（减）、*（乘）、&#x2F;（除）、%（取模，也就是商）  </span><br><span class="line"></span><br><span class="line">2. 赋值运算符  </span><br><span class="line">等号&quot;&#x3D;&quot;表示赋值，例如：Name&#x3D;‘王华’</span><br><span class="line"></span><br><span class="line">3. 比较运算符  </span><br><span class="line">等于&#x3D;&#x3D;  </span><br><span class="line">大于&gt;  </span><br><span class="line">小于&lt;  </span><br><span class="line">不等于&lt;&gt;  </span><br><span class="line">大于等于&gt;&#x3D;  </span><br><span class="line">小于等于&lt;&#x3D;  </span><br><span class="line">不等于!&#x3D;</span><br><span class="line"></span><br><span class="line">4. 逻辑运算符  </span><br><span class="line">逻辑运算符用来对某个条件进行判断，以获得判断的真假，返回带有true或false值得布尔数据类型  </span><br><span class="line">AND当且仅当两个布尔表达式都为true时，返回true  </span><br><span class="line">OR当且仅当两个布尔表达式都为false时，返回false  </span><br><span class="line">NOT对布尔表达式的值取反，优先级别最高</span><br></pre></td></tr></table></figure><h2 id="数据库常用的运算符的优先级"><a class="markdownIt-Anchor" href="#数据库常用的运算符的优先级"></a> 数据库常用的运算符的优先级</h2><p><img src="https://raw.githubusercontent.com/cyn51666/Blog-images/master/20201028213617.png" alt="20201028213617" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;在sql语言中常用的运算符有以下几种&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#在sql语言中常用的运算符有以下几种&quot;&gt;&lt;/a&gt; 在sql语言中常用的运算符有以下几种：&lt;/h2&gt;
&lt;figure class=&quot;highlight p</summary>
      
    
    
    
    <category term="SQL Server" scheme="https://cyn51666.github.io/categories/SQL-Server/"/>
    
    
    <category term="笔记" scheme="https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据表的创建</title>
    <link href="https://cyn51666.github.io/2020/10/28/%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
    <id>https://cyn51666.github.io/2020/10/28/%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%84%E5%88%9B%E5%BB%BA/</id>
    <published>2020-10-28T12:00:51.000Z</published>
    <updated>2020-10-29T01:51:24.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-建表的基本语法"><a class="markdownIt-Anchor" href="#1-建表的基本语法"></a> 1. 建表的基本语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table 表名</span><br><span class="line">(</span><br><span class="line">    字段1 数据类型 列的特征,</span><br><span class="line">    字段2 数据类型 列的特征,</span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line">go</span><br></pre></td></tr></table></figure><h2 id="2-列的特征包含的内容"><a class="markdownIt-Anchor" href="#2-列的特征包含的内容"></a> 2. 列的特征包含的内容</h2><ol><li>是否为空（NULL）: 在输入数据时，数据的列允许为空时，可以不输入数据，否则必须输入。列是否为空要根据数据库的设计具体要求决定，对关键列必须禁止为空</li><li>是否标识列（自动编号）</li><li>是否有默认值：如果数据表的某列在用户不输入数据时，希望提供一个默认的内容，比如：用户不输入学员地址，则默认地址不详</li><li>是否为主键：主键是实体的唯一标识，保证实体不被重复。</li></ol><h2 id="3-实践"><a class="markdownIt-Anchor" href="#3-实践"></a> 3. 实践</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">use master</span><br><span class="line">go</span><br><span class="line">--判断当前数据库是否存在</span><br><span class="line">if exists(select * from sysdatabases where name&#x3D;&#39;StudentmanManageDB&#39;)</span><br><span class="line">drop database StudentManageDB</span><br><span class="line">go</span><br><span class="line">--创建数据表</span><br><span class="line">create database StudentManageDB</span><br><span class="line">on primary</span><br><span class="line">(</span><br><span class="line">    name&#x3D;&#39;StudentManageDB&#39;,--数据库名</span><br><span class="line">    filename&#x3D;E:\DB\StudentManageDB.mdf,--文件名</span><br><span class="line">    size&#x3D;10MB,--初始数据库的大小</span><br><span class="line">    filegrowth&#x3D;5MB--数据自动增长</span><br><span class="line">)</span><br><span class="line">log on </span><br><span class="line">(</span><br><span class="line">    name&#x3D;&#39;StudentManageDB_log&#39;,--数据库名</span><br><span class="line">    filename&#x3D;E:\DB\StudentManageDB_log.ldf,--文件名</span><br><span class="line">    size&#x3D;10MB,--初始数据库的大小</span><br><span class="line">    filegrowth&#x3D;5MB--数据自动增长</span><br><span class="line">)</span><br><span class="line">--创建数据表</span><br><span class="line">use StudentManageDB</span><br><span class="line">go</span><br><span class="line">if exists(select * from sysobjects where name &#x3D; &#39;Sududents&#39;)</span><br><span class="line">drop table Students</span><br><span class="line">go </span><br><span class="line">create table Students</span><br><span class="line">(</span><br><span class="line">    StudentId int identity(10000,1) ,--学号设置为标识列，从10000开始每次自动增长1</span><br><span class="line">    StudentName varchar(20) not null ,--姓名</span><br><span class="line">    Gender char(2) not null,--性别</span><br><span class="line">    Birthday datetime not null,--出生日期</span><br><span class="line">    StudentIdNo numeric(18,0) not null,--身份证号</span><br><span class="line">    Age int not null,--年龄</span><br><span class="line">    PhoneNumber varchar(50),</span><br><span class="line">    StudentAddress varchar(500),--电话号码</span><br><span class="line">)</span><br><span class="line">go</span><br><span class="line">--创建班级表</span><br><span class="line">if exists(select * from sysobjects where name &#x3D; &#39;SududentClass&#39;)</span><br><span class="line">drop table StudentClass</span><br><span class="line">go </span><br><span class="line">create table StudentClass</span><br><span class="line">(</span><br><span class="line">    ClassId int primary key,--班级编号，主键，直接定义</span><br><span class="line">    ClassName vchar(20) not null,</span><br><span class="line">)</span><br><span class="line">--创建成绩表</span><br><span class="line">if exists(select * from sysobjects where name &#x3D; &#39;ScoreList&#39;)</span><br><span class="line">drop table ScoreList</span><br><span class="line">go </span><br><span class="line">create table ScoreList</span><br><span class="line">(</span><br><span class="line">    Id int identity(1,1),</span><br><span class="line">    StudentId int not null,--学号，外键</span><br><span class="line">    CSharp int null, --CSharp成绩允许为空</span><br><span class="line">    SQL int null,</span><br><span class="line">    UpdateTime datetime not null,--更新时间</span><br><span class="line">)</span><br><span class="line">go</span><br><span class="line">--创建管理员数据表</span><br><span class="line">if exists(select * from sysobjects where name &#x3D; &#39;Admins&#39;)</span><br><span class="line">drop table Admins</span><br><span class="line">go </span><br><span class="line">create table Admins</span><br><span class="line">(</span><br><span class="line">    LoginId int identity(1000,1) primary key,</span><br><span class="line">    LoginPwd varchar(20) not null,--登录密码</span><br><span class="line">    AdminName varchar(20) not null</span><br><span class="line">)</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-批处理语句-go"><a class="markdownIt-Anchor" href="#4-批处理语句-go"></a> 4. 批处理语句 go</h2><ol><li>go是批处理的标志，表示SQLServer将这些SQL语句编译为一个执行单元，提高执行效率。一般是将一些逻辑相关的业务操作语句放在同一批中，这完全由业务需求和代码编写者决定</li><li>go是SQLServer的批处理命令，只有代码编辑器才能识别并处理，编辑其他应用程序就不能使用该命令。由于每个批处理之间是独立的，因此，在一个批处理出现错误时，并不会影响其他批处理中的SQL代码的运行</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-建表的基本语法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-建表的基本语法&quot;&gt;&lt;/a&gt; 1. 建表的基本语法&lt;/h2&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    <category term="SQL Server" scheme="https://cyn51666.github.io/categories/SQL-Server/"/>
    
    
    <category term="笔记" scheme="https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>sql数据类型</title>
    <link href="https://cyn51666.github.io/2020/10/28/sql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://cyn51666.github.io/2020/10/28/sql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-10-28T11:55:50.000Z</published>
    <updated>2020-10-29T02:45:45.277Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sqlserver数据类型"><a class="markdownIt-Anchor" href="#sqlserver数据类型"></a> SQLServer数据类型</h2><h3 id="1-文本类型"><a class="markdownIt-Anchor" href="#1-文本类型"></a> 1. 文本类型</h3><ol><li><p>char:固定长度的非Unicode字符数据，最大长度为8000个字符</p></li><li><p>vchar:可变长度的非Unicode数据，最大长度为8000个字符</p></li><li><p>text:存储长文本信息，最大长度为2^31-1(2147483647)个字符</p></li><li><p>nchar:固定长度的Unicode数据，最大长度为4000个字符</p></li><li><p>nvchar:固定长度的Unicode数据，最大长度为4000个字符</p></li><li><p>text:存储可变长文本信息，最大长度为2^30-1个字符</p></li></ol><h3 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意：</h3><ol><li><p>Unicode是国际组织制定的可以容纳世界上所有文字和字符的编码方案</p></li><li><p>带n的数据类型长度是不带n的两倍，比如nchar(1)和char(2)长度相同</p></li></ol><h3 id="2-值类型"><a class="markdownIt-Anchor" href="#2-值类型"></a> 2. 值类型</h3><ol><li>整数类型</li></ol><p><img src="https://raw.githubusercontent.com/cyn51666/Blog-images/master/20201028192808.png" alt="20201028192808" /></p><ol start="2"><li>精确数字类型</li></ol><p><img src="https://raw.githubusercontent.com/cyn51666/Blog-images/master/20201028192848.png" alt="20201028192848" /></p><ol start="3"><li>近似数字（浮点）类型</li></ol><p><img src="https://raw.githubusercontent.com/cyn51666/Blog-images/master/20201028192911.png" alt="20201028192911" /></p><h3 id="3-日期类型"><a class="markdownIt-Anchor" href="#3-日期类型"></a> 3. 日期类型</h3><p><img src="https://raw.githubusercontent.com/cyn51666/Blog-images/master/20201028193316.png" alt="20201028193316" /></p><p>注意：日期在使用时要用单引号（’’）括起来，建议都使用datetime</p><h3 id="4-货币类型"><a class="markdownIt-Anchor" href="#4-货币类型"></a> 4. 货币类型</h3><p><img src="https://raw.githubusercontent.com/cyn51666/Blog-images/master/20201028193728.png" alt="20201028193728" /></p><h3 id="5-位类型"><a class="markdownIt-Anchor" href="#5-位类型"></a> 5. 位类型</h3><p><img src="https://raw.githubusercontent.com/cyn51666/Blog-images/master/20201028193759.png" alt="20201028193759" /></p><h3 id="6-二进制类型"><a class="markdownIt-Anchor" href="#6-二进制类型"></a> 6. 二进制类型</h3><p><img src="https://raw.githubusercontent.com/cyn51666/Blog-images/master/20201028193835.png" alt="20201028193835" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;sqlserver数据类型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sqlserver数据类型&quot;&gt;&lt;/a&gt; SQLServer数据类型&lt;/h2&gt;
&lt;h3 id=&quot;1-文本类型&quot;&gt;&lt;a class=&quot;markdownIt-Ancho</summary>
      
    
    
    
    <category term="SQL Server" scheme="https://cyn51666.github.io/categories/SQL-Server/"/>
    
    
    <category term="笔记" scheme="https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据据库的创建2</title>
    <link href="https://cyn51666.github.io/2020/10/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%88%9B%E5%BB%BA2/"/>
    <id>https://cyn51666.github.io/2020/10/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%88%9B%E5%BB%BA2/</id>
    <published>2020-10-28T11:49:46.000Z</published>
    <updated>2020-10-29T01:50:57.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-创建多个数据文件和日志文件"><a class="markdownIt-Anchor" href="#1-创建多个数据文件和日志文件"></a> 1. 创建多个数据文件和日志文件</h2><p>创建多个数据文件和日志文件</p><p><img src="https://raw.githubusercontent.com/cyn51666/Blog-images/master/20201028184102.png" alt="20201028184102" /></p><p>注意：创建多个数据文件和日志文件要用逗号分开，数据库文件名不能重复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">use master</span><br><span class="line">go</span><br><span class="line">--判断当前数据库是否存在</span><br><span class="line">if exists(select * from sysdatabases where name&#x3D;&#39;StudentmanManageDB&#39;)</span><br><span class="line">drop database StudentManageDB</span><br><span class="line">go</span><br><span class="line">create database StudentManageDB</span><br><span class="line">on primary</span><br><span class="line">(</span><br><span class="line">    name&#x3D;&#39;StudentManageDB&#39;,--数据库名</span><br><span class="line">    filename&#x3D;E:\DB\StudentManageDB.mdf,--文件名</span><br><span class="line">    size&#x3D;10MB,--初始数据库的大小</span><br><span class="line">    filegrowth&#x3D;5MB--数据自动增长</span><br><span class="line">)</span><br><span class="line">log on </span><br><span class="line">(</span><br><span class="line">    name&#x3D;&#39;StudentManageDB_log&#39;,--数据库名</span><br><span class="line">    filename&#x3D;E:\DB\StudentManageDB_log.ldf,--文件名</span><br><span class="line">    size&#x3D;10MB,--初始数据库的大小</span><br><span class="line">    filegrowth&#x3D;5MB--数据自动增长</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="2-分离与附加数据库"><a class="markdownIt-Anchor" href="#2-分离与附加数据库"></a> 2. 分离与附加数据库</h2><p><img src="https://raw.githubusercontent.com/cyn51666/Blog-images/master/20201028190653.png" alt="20201028190653" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-创建多个数据文件和日志文件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-创建多个数据文件和日志文件&quot;&gt;&lt;/a&gt; 1. 创建多个数据文件和日志文件&lt;/h2&gt;
&lt;p&gt;创建多个数据文件和日志文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;h</summary>
      
    
    
    
    <category term="SQL Server" scheme="https://cyn51666.github.io/categories/SQL-Server/"/>
    
    
    <category term="笔记" scheme="https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据据库的创建1</title>
    <link href="https://cyn51666.github.io/2020/10/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%88%9B%E5%BB%BA1/"/>
    <id>https://cyn51666.github.io/2020/10/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%88%9B%E5%BB%BA1/</id>
    <published>2020-10-28T11:48:46.000Z</published>
    <updated>2020-10-29T01:50:31.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库的创建1"><a class="markdownIt-Anchor" href="#数据库的创建1"></a> 数据库的创建1</h1><h2 id="1-基本概念"><a class="markdownIt-Anchor" href="#1-基本概念"></a> 1. 基本概念</h2><ol><li><p>创建数据库： create database phpDb</p></li><li><p>删除数据库： drop database phpDb</p></li></ol><hr /><h2 id="2-数据库分类"><a class="markdownIt-Anchor" href="#2-数据库分类"></a> 2. 数据库分类</h2><h3 id="1-系统数据库"><a class="markdownIt-Anchor" href="#1-系统数据库"></a> 1. 系统数据库</h3><p>master: 保存已有数据库的信息（系统登录，配置设置，已连接的SERVER等）</p><p>model: 创建新用户数据库的模板数据库</p><p>msdb: 用来保存数据库备份，SQL Agent信息，DTS程序包，SQLSERVER任务等信息</p><p>tempdb: 存有临时对象，例如临时表格和存储过程</p><p><img src="https://raw.githubusercontent.com/cyn51666/Blog-images/master/20201028175702.png" alt="20201028175702" /></p><h3 id="2-用户数据库"><a class="markdownIt-Anchor" href="#2-用户数据库"></a> 2. 用户数据库</h3><p>用户数据库的组成: 主数据文件+日志文件</p><p><img src="https://raw.githubusercontent.com/cyn51666/Blog-images/master/20201028180023.png" alt="20201028180023" /></p><hr /><h2 id="3-创建数据库例子"><a class="markdownIt-Anchor" href="#3-创建数据库例子"></a> 3. 创建数据库例子</h2><pre class="highlight"><code class=""> --指向当前要使用的数据库   use master   go   --创建数据库  create database StudentManageDBon primary(--数据库的逻辑名name = 'StudentManageDB_data',--数据库的物理文件名（绝对路径）filename='E:/D/StudentManage_data.mdf',--数据库文件初始大小size=10MB,--数据文件增长量filegrowth=1MB)log on (name = 'StudentManageDB_log',filename = 'StudentManageDB_log.ldf',size=2MB,filegrowth=1MB)go</code></pre><p>primary代表主文件组，主要用于管理磁盘空间，文件组分为主文件组和次文件组，日志文件不属于任何文件组</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库的创建1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数据库的创建1&quot;&gt;&lt;/a&gt; 数据库的创建1&lt;/h1&gt;
&lt;h2 id=&quot;1-基本概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-基本概念&quot;&gt;</summary>
      
    
    
    
    <category term="SQL Server" scheme="https://cyn51666.github.io/categories/SQL-Server/"/>
    
    
    <category term="笔记" scheme="https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C Sharp实体类在开发中的应用</title>
    <link href="https://cyn51666.github.io/2020/10/12/C%20Sharp%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%9C%A8%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://cyn51666.github.io/2020/10/12/C%20Sharp%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%9C%A8%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2020-10-12T12:48:48.000Z</published>
    <updated>2020-10-13T00:29:13.795Z</updated>
    
    <content type="html"><![CDATA[<ol><li>前后台代码混编的缺点<ol><li>程序编写人员必须非常实习后台数据的设计</li><li>业务逻辑复杂时很难查找错误且不利于后期维护</li><li>不符合面向对象的设计思想</li></ol></li></ol><hr /><ol start="2"><li>问题解决<ol><li>将数据展示代码和数据访问代码分离</li><li>根据当前需要访问的后台实体，创建一个对应的数据访问类</li><li>将对该实体操作的方法封装到对应的访问类中</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;前后台代码混编的缺点
&lt;ol&gt;
&lt;li&gt;程序编写人员必须非常实习后台数据的设计&lt;/li&gt;
&lt;li&gt;业务逻辑复杂时很难查找错误且不利于后期维护&lt;/li&gt;
&lt;li&gt;不符合面向对象的设计思想&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;ol star</summary>
      
    
    
    
    <category term="C Sharp" scheme="https://cyn51666.github.io/categories/C-Sharp/"/>
    
    
    <category term="笔记" scheme="https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C Sharp对象职责明确原则</title>
    <link href="https://cyn51666.github.io/2020/10/12/C%20Sharp%E8%81%8C%E8%B4%A3%E6%98%8E%E7%A1%AE%E5%8E%9F%E5%88%99/"/>
    <id>https://cyn51666.github.io/2020/10/12/C%20Sharp%E8%81%8C%E8%B4%A3%E6%98%8E%E7%A1%AE%E5%8E%9F%E5%88%99/</id>
    <published>2020-10-12T12:48:47.000Z</published>
    <updated>2020-10-13T00:27:10.922Z</updated>
    
    <content type="html"><![CDATA[<ol><li>前后台代码混编的缺点<ol><li>程序编写人员必须非常实习后台数据的设计</li><li>业务逻辑复杂时很难查找错误且不利于后期维护</li><li>不符合面向对象的设计思想</li></ol></li></ol><hr /><ol start="2"><li>问题解决<ol><li>将数据展示代码和数据访问代码分离</li><li>根据当前需要访问的后台实体，创建一个对应的数据访问类</li><li>将对该实体操作的方法封装到对应的访问类中</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;前后台代码混编的缺点
&lt;ol&gt;
&lt;li&gt;程序编写人员必须非常实习后台数据的设计&lt;/li&gt;
&lt;li&gt;业务逻辑复杂时很难查找错误且不利于后期维护&lt;/li&gt;
&lt;li&gt;不符合面向对象的设计思想&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;ol star</summary>
      
    
    
    
    <category term="C Sharp" scheme="https://cyn51666.github.io/categories/C-Sharp/"/>
    
    
    <category term="笔记" scheme="https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C Sharp方法参数过多的缺点</title>
    <link href="https://cyn51666.github.io/2020/10/12/C%20Sharp%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E8%BF%87%E5%A4%9A%E7%9A%84%E7%BC%BA%E7%82%B9/"/>
    <id>https://cyn51666.github.io/2020/10/12/C%20Sharp%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E8%BF%87%E5%A4%9A%E7%9A%84%E7%BC%BA%E7%82%B9/</id>
    <published>2020-10-12T12:48:46.000Z</published>
    <updated>2020-10-13T00:19:54.553Z</updated>
    
    <content type="html"><![CDATA[<ol><li>方法参数过多的缺点<ol><li>定义和使用不方便，很容易把参数写错</li><li>当对象的属性变化时，方法的参数必须改变</li><li>参数的改变，造成对象接口不稳定，降低了可维护性，可扩展性和安全性，与面向对象原则相悖</li><li>方法参数多，不符合面向对象的低耦合，高内聚的要求</li><li>后台方法的编写依赖数据库的完成</li><li>前台代码实现依赖后台方法的完成，团队中无法并行开发</li></ol></li></ol><hr /><ol start="2"><li>问题思路与解决<ol><li>为类的设计提供一个规范，稳定对象的接口</li><li>不同开发人员只需要按照规范接口即可同步开发</li></ol></li></ol><hr /><ol start="3"><li>问题解决办法<ol><li>使用“实体类”作为方法参数，稳定对外接口</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;方法参数过多的缺点
&lt;ol&gt;
&lt;li&gt;定义和使用不方便，很容易把参数写错&lt;/li&gt;
&lt;li&gt;当对象的属性变化时，方法的参数必须改变&lt;/li&gt;
&lt;li&gt;参数的改变，造成对象接口不稳定，降低了可维护性，可扩展性和安全性，与面向对象原则相悖&lt;/li&gt;
&lt;li&gt;方法参数</summary>
      
    
    
    
    <category term="C Sharp" scheme="https://cyn51666.github.io/categories/C-Sharp/"/>
    
    
    <category term="笔记" scheme="https://cyn51666.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>再别康桥2</title>
    <link href="https://cyn51666.github.io/2020/10/12/%E5%86%8D%E5%88%AB%E5%BA%B7%E6%A1%A52/"/>
    <id>https://cyn51666.github.io/2020/10/12/%E5%86%8D%E5%88%AB%E5%BA%B7%E6%A1%A52/</id>
    <published>2020-10-12T04:26:46.000Z</published>
    <updated>2020-10-23T03:22:11.725Z</updated>
    
    <content type="html"><![CDATA[<p>那河畔的金柳，</p><hr /><p>是夕阳中的新娘；</p><hr /><p>波光里的艳影，</p><hr /><p>在我的心头荡漾。</p><hr />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;那河畔的金柳，&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;是夕阳中的新娘；&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;波光里的艳影，&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在我的心头荡漾。&lt;/p&gt;
&lt;hr /&gt;
</summary>
      
    
    
    
    <category term="hexo" scheme="https://cyn51666.github.io/categories/hexo/"/>
    
    
    <category term="基础" scheme="https://cyn51666.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>再别康桥1</title>
    <link href="https://cyn51666.github.io/2020/10/11/%E5%86%8D%E5%88%AB%E5%BA%B7%E6%A1%A51/"/>
    <id>https://cyn51666.github.io/2020/10/11/%E5%86%8D%E5%88%AB%E5%BA%B7%E6%A1%A51/</id>
    <published>2020-10-11T04:26:46.000Z</published>
    <updated>2020-10-12T07:50:21.306Z</updated>
    
    <content type="html"><![CDATA[<p>轻轻的我走了，<br />正如我轻轻的来；<br />我轻轻的招手，<br />作别西天的云彩。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;轻轻的我走了，&lt;br /&gt;
正如我轻轻的来；&lt;br /&gt;
我轻轻的招手，&lt;br /&gt;
作别西天的云彩。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="hexo" scheme="https://cyn51666.github.io/categories/hexo/"/>
    
    
    <category term="基础" scheme="https://cyn51666.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://cyn51666.github.io/2020/10/11/hello-world/"/>
    <id>https://cyn51666.github.io/2020/10/11/hello-world/</id>
    <published>2020-10-11T04:23:51.777Z</published>
    <updated>2020-10-11T04:23:51.777Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
